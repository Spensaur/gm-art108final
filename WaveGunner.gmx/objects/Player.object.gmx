<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SpaceShip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>threshold = .2;
myID = -1;
shoulderThreshold = .05;
spd = 8;
rotationSpd = 5
rotation = 0;
momentum = 0;
centMomentum = 0;
frictionRotation = .05;
angle = 0;
controllable = true;
lvs = 10;
collided = false;
sideLength = 63;
numberOfSides = 6;
width = 5;
fields = 3;
sides[6] = -1;
healthBar = -1;
timeOfLastCol = 0;
startSound = false;
isActivelyRotatingKeyLeft = false;
isActivelyRotatingKeyRight = false;
isActivelyRotatingPadLeft = false;
isActivelyRotatingPadRight = false;
pScore = 0;
beamSound = -1;
damagedState = false;
damagedStartTime = -1;
damagedCurrentTime = -1;
currentSubimage = 0;
subimageMin = 0;
subimageMax = 0;
imageTime = 0;
frameCounter = 0;
pHealth = 10;
healthWidth = (207 - 13) / pHealth;
energy = 10000;
energyRation = 1;
doubleLazerEnergy = 1000;
beamEnergy = 10;
curveEnergy = 10;
shootingStickLazer = false;
maxLazerDistance = 500;
stickLazerRotation = 0;
lockOnLazerEnergy = 10;
shootingBeam = false;
shootingCurve = false;
beamDistance = -1;
beamDistanceInv = -1;
hitEnemys = -1;

previousX = x;
previousY = y;
beamHits = -1;

rotatePart = part_type_create();
genPartSys = part_system_create();
part_system_depth(genPartSys, 10000);
part_type_sprite(rotatePart,GlowCircle,false,false,false);
part_type_life(rotatePart, room_speed/2, room_speed/2);
part_type_colour_rgb(rotatePart, 27, 27, 255, 255, 236, 236);
part_type_alpha3(rotatePart, .6, .1, 0);
part_type_size(rotatePart, .20, .20, -.01, 0);
part_type_blend(rotatePart, true);


movementPart = part_type_create();
//movementPartSys = part_system_create();
part_type_sprite(movementPart,GlowCircle,false,false,false);
part_type_life(movementPart, room_speed/2, room_speed/2);
part_type_colour_rgb(movementPart, 219, 219, 85, 85, 219, 219);
part_type_alpha3(movementPart, .6, .1, 0);
part_type_size(movementPart, .35, .35, -.01, 0);
part_type_blend(movementPart, true);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>damagedState = false;
currentSubimage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_orientation(rotatePart,angle,angle,0,0,false);
if(keyboard_check(ord('W'))||keyboard_check(ord('A'))||keyboard_check(ord('S'))||keyboard_check(ord('D'))){
    part_particles_create(genPartSys, getPointRotationX(x,y+30,x,y,angle), getPointRotationY(x,y+30,x,y,angle), movementPart, 1);
}
if (keyboard_check(ord('W'))) {
    y -= spd;
}
if (keyboard_check(ord('S'))) {
    y += spd;
}
if (keyboard_check(ord('A'))) {
    x -= spd;
}
if (keyboard_check(ord('D'))) {
    x += spd;
}
if (keyboard_check(ord('F'))) {
    angle += 3.5;
}
if (keyboard_check(ord('G'))) {
    angle -= 3.5;
}
if (keyboard_check(ord('C'))) {
   part_particles_create(genPartSys, getPointRotationX(x-30,y+54,x,y,angle), getPointRotationY(x-30,y+54,x,y,angle), rotatePart, 1);
    if(centMomentum &lt; 30) {
        centMomentum += 1;
        isActivelyRotatingKeyLeft = true;
    }
}
else{
     isActivelyRotatingKeyLeft = false;
}
if (keyboard_check(ord('V'))) {
    part_particles_create(genPartSys, getPointRotationX(x+30,y+54,x,y,angle), getPointRotationY(x+30,y+54,x,y,angle), rotatePart, 1);
    if(centMomentum &gt; -30) {
        centMomentum -= 1;
        isActivelyRotatingKeyRight = true;
    }
}
else{
    isActivelyRotatingKeyRight = false;
}
if (mouse_check_button_pressed(mb_left)) {
    if(energy &gt; doubleLazerEnergy){
        energy -= doubleLazerEnergy;
        with(instance_create(getPointRotationX(x-30,y,x,y,angle),getPointRotationY(x-30,y,x,y,angle),Obj_Lazer)) {
            angle = other.angle;
            motion_set(angle+90,spd);
        }
        with(instance_create(getPointRotationX(x+30,y,x,y,angle),getPointRotationY(x+30,y,x,y,angle),Obj_Lazer)) {
            angle = other.angle;
            motion_set(angle+90,spd);
        }
    }
}
if (mouse_check_button(mb_right)) {
    if(energy &gt; stickLazerEnergy){
        shootingStickLazer = true;
        energy -= stickLazerEnergy;
        //stickLazerRotation = angleOfPoints(x, y, mouse_x, mouse_y);
    }
}
else{
    shootingStickLazer = false;
}

PlayerMovement_1(0);
playerFireGPad(0);
image_angle = angle;
//Test Controls
if (keyboard_check_pressed(ord('-'))) {
    if(damagedState = false){
        pHealth--;
        if(pHealth &lt;= 0){
        //game over
        }
        else{
            //instance_change(PlayerDamaged, false);
            damagedState = true;
            alarm[0] = 1.5 * room_speed;
            subimageMin = 1;
            subimageMax = 2;
            imageTime = room_speed/5;
            currentSubimage = subimageMin;
        }
    }
}
if(damagedState = true) {
    if(frameCounter &gt; imageTime){
        frameCounter = 0;
        currentSubimage++;
        if(currentSubimage &gt; subimageMax){
            currentSubimage = subimageMin;
        }
    }
    frameCounter++;
}
if(energy &lt; 10000){
 energy += 50;
 
}
if(energy &lt;= 0){
    energyRatio = 0;
}
else{
    energyRatio = energy/10000;
}
/*if(shootingBeam == true &amp;&amp; startSound == false){
    beamSound = audio_play_sound(LazerSnd3, 20, true);
    startSound = true;
}
else{
    audio_stop_sound(beamSound);
    startSound = false;
}*/
/*if(hitEnemys != noone){
    if(!ds_list_empty(hitEnemys)){
        var hitEnemysSize = ds_list_size(hitEnemies);
        for(i = 0; i &lt; hitEnemysSize; i++){
            
        }
    }
}*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="CrabObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(damagedState = false){
        pHealth--;
        if(pHealth &lt;= 0){
        //game over
        }
        else{
            //instance_change(PlayerDamaged, false);
            damagedState = true;
            alarm[0] = 1.5 * room_speed;
            subimageMin = 1;
            subimageMax = 2;
            imageTime = room_speed/5;
            currentSubimage = subimageMin;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ShrimpObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(damagedState = false){
        pHealth--;
        if(pHealth &lt;= 0){
        //game over
        }
        else{
            //instance_change(PlayerDamaged, false);
            damagedState = true;
            alarm[0] = 1.5 * room_speed;
            subimageMin = 1;
            subimageMax = 2;
            imageTime = room_speed/5;
            currentSubimage = subimageMin;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="HammerHeadDeadObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(damagedState = false){
        pHealth--;
        if(pHealth &lt;= 0){
        //game over
        }
        else{
            //instance_change(PlayerDamaged, false);
            damagedState = true;
            alarm[0] = 1.5 * room_speed;
            subimageMin = 1;
            subimageMax = 2;
            imageTime = room_speed/5;
            currentSubimage = subimageMin;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="SharkCircleObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(damagedState = false){
        pHealth--;
        if(pHealth &lt;= 0){
        //game over
        }
        else{
            //instance_change(PlayerDamaged, false);
            damagedState = true;
            alarm[0] = 1.5 * room_speed;
            subimageMin = 1;
            subimageMax = 2;
            imageTime = room_speed/5;
            currentSubimage = subimageMin;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="WallFishRightObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = previousX;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="WallFishLeftObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = previousX;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="WallFishTopObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = previousY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="WallFishBotObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = previousY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="SpaceSharkObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(damagedState = false){
        pHealth--;
        if(pHealth &lt;= 0){
        //game over
        }
        else{
            //instance_change(PlayerDamaged, false);
            damagedState = true;
            alarm[0] = 1.5 * room_speed;
            subimageMin = 1;
            subimageMax = 2;
            imageTime = room_speed/5;
            currentSubimage = subimageMin;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="HammerHeadObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(damagedState = false){
        pHealth--;
        if(pHealth &lt;= 0){
        room_goto(0);
        //game over
        }
        else{
            //instance_change(PlayerDamaged, false);
            damagedState = true;
            alarm[0] = 1.5 * room_speed;
            subimageMin = 1;
            subimageMax = 2;
            imageTime = room_speed/5;
            currentSubimage = subimageMin;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_roundrect_colour_ext(10, 10, 212, 40, 5, 5, c_white, c_silver, false);
draw_roundrect_colour_ext(13, 13, 209, 37, 5, 5, c_black, c_black, false);

for(var i = 0; i &lt; pHealth; i++){
    draw_roundrect_colour_ext(15 + i*healthWidth, 15,(15 + i*healthWidth) + healthWidth - 2, 35, 5, 5, c_red, c_red, false);
}

draw_roundrect_colour_ext(10, 50, 212, 80, 5, 5, c_white, c_silver, false);
draw_roundrect_colour_ext(13, 53, 209, 77, 5, 5, c_black, c_black, false);
draw_roundrect_colour_ext(13, 53, 209 * energyRatio, 77, 5, 5, c_blue, c_blue, false);

draw_text_transformed_colour(10, 300, 3, 3, 0, "Score: " + string(pScore),
 c_lime, c_lime, c_green, c_green, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(SpaceShip,currentSubimage,x,y,
image_xscale,image_yscale,angle,image_blend, image_alpha);
/*
draw_line_width_colour(x, y, getPointRotationX(x,y-500,x,y-20,angle),
getPointRotationY(x,y-500,x,y-20,angle),
  2, c_red, c_red);

draw_line_width_colour(x, y, getPointRotationX(x,y-500,x,y-20,angle+15),
getPointRotationY(x,y-500,x,y-20,angle+15),
  2, c_blue, c_blue);
  
draw_line_width_colour(x, y, getPointRotationX(x,y-500,x,y-20,angle-15),
getPointRotationY(x,y-500,x,y-20,angle-15),
  2, c_green, c_green);
*/
/*if(shootingBeam){
    if(beamDistance == -1){
        draw_sprite_ext(BeamSpr,image_index,x,y,
        image_xscale,image_yscale,angle,image_blend, image_alpha);
    }
    else{
        draw_sprite_general(BeamSpr,image_index,0,beamDistanceInv,
        sprite_width, beamDistance,x,y,image_xscale,image_yscale,angle, image_blend,
        image_blend, image_blend, image_blend,image_alpha);
    }
}*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
